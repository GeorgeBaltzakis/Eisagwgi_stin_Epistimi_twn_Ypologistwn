# Paradoteo Askisewn

# Ask 1
"""
  Γράψτε ένα κώδικα σε Python ο οποίος να παίρνει την διάσταση
ενός τετραγώνου και θα φτιάχνει μέσα από λίστες τον αντίστοιχο
πίνακα. Στην συνέχεια θα βρίσκει το πλήθος των θέσεων και θα
γεμίζει στην τύχη τις μισές με μονάδες. Σκοπός είναι να
μετρήσετε πόσες τετράδες από μονάδες υπάρχουν οριζόντια,
κάθετα, και διαγώνια. Το πρόγραμμα επαναλλαμβάνεται 100 φορές
(για την ίδια διάσταση) και επιστρέφει τον μέσο όρο των
τετράδων.
"""
import random


def ask_1():
    d = -1

    # Check
    while d <= 3:
        try:
            d = int(input("Give n: "))
        except ValueError:
            print("Value Error")

    # Square Creation
    my_square = [[0 for _ in range(d)] for _ in range(d)]

    # 1s location
    for i in range(int((d**2)/2)):
        while True:
            my_i = random.randrange(0, d)
            my_j = random.randrange(0, d)
            if my_square[my_i][my_j] == 0:
                my_square[my_i][my_j] = 1
                break


ask_1()

# Ask 2
"""
Γράψτε ένα κώδικα σε Python ο οποίος ελέγχει αν ο ν όρος 
της ακολουθίας Fibonacci είναι πρώτος ή όχι. Για να απαντήσετε 
αν ένας αριθμός p είναι πρώτος θα πρέπει για 20 τυχαίες 
επιλογές του a να ισχύει ότι a^p=a mod p. Ο κώδικάς σας 
παίρνει τον όρο της ακολουθίας Fibonacci από το χρήστη.
"""

# Ask 4
"""
Γράψτε ένα κώδικα σε Python ο οποίος να παίρνει σαν είσοδο 
ένα αρχείο ASCII κειμένου και να το κόβει σε συνεχόμενες 
τριάδες λέξεων (όλες τις δυνατές). Στην συνέχεια, διαλέγει 
τυχαία μια τριάδα και προσπαθεί να συντάξει ένα τυχαίο κείμενο 
από αυτό, χρησιμοποιώντας τις δυο τελευταίες λέξεις και 
επιλέγοντας μια τριάδα που να ξεκινάει από αυτές τις δυο. 
Το πρόγραμμα ολοκληρώνεται, όταν γράψει 200 λέξεις ή δεν 
μπορεί να επιλεγχεί άλλη τριάδα λέξεων.
"""

# Ask 9
"""
Γράψτε ένα κώδικα σε Python ο οποίος να παίρνει σαν είσοδο 
ένα αρχείο ASCII κειμένου και μετατρέπει τον κάθε χαρακτήρα 
στον αντίστοιχο αριθμό ASCII και κρατάει τους μονούς. 
Εμφανίστε τα στατιστικά εμφάνισης του κάθε γράμματος με 
“μπάρες” χρησιμοποιώντας το χαρακτήρα *, 
όπου κάθε * αντιστοιχεί σε 1%
"""
